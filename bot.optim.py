from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import uuid

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_TOKEN = '8118583402:AAF0vADomGWJkpnyaDre1TSnp29dq1WXnkE'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
STAR_PRICE = 1.83
MIN_PAYOUT = 500
STAR_PRICES = [100, 250, 500, 1000, 2500]
MAIN_MENU_TEXT = (
    "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
    "–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å ‚≠êÔ∏è Telegram Stars –¥–µ—à–µ–≤–ª–µ, —á–µ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –±–µ–∑ KYC –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n"
    "–î–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–ª–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é –°–ë–ü –∏ –∫—Ä–∏–ø—Ç–æ–π\n"
    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞
bot = Bot(token=API_TOKEN)
router = Router()
user_states = {}

def create_main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text='‚≠êÔ∏è –ö—É–ø–∏—Ç—å —Å–µ–±–µ', callback_data='buy_for_self')
    builder.button(text='‚≠êÔ∏è –ü–æ–¥–∞—Ä–∏—Ç—å', callback_data='gift')
    builder.row()
    builder.button(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    builder.row()
    builder.button(text='üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', callback_data='referral_system')
    builder.row()
    builder.button(text='üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
    builder.row()
    builder.button(text='üëâ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª', url='https://t.me/starfall_channel')
    builder.button(text='üëâ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±–∞–ø–ø', url='http://w91224il.beget.tech/')
    builder.adjust(2, 1, 1, 1, 1, 1)
    return builder.as_markup()

@router.message(F.text == "/start")
async def send_welcome(message: Message):
    await message.answer(MAIN_MENU_TEXT, reply_markup=create_main_menu_keyboard())

@router.callback_query(F.data == 'back_to_main_menu')
async def process_back_to_main_menu(callback_query: CallbackQuery):
    await callback_query.message.edit_text(MAIN_MENU_TEXT, reply_markup=create_main_menu_keyboard())
    await callback_query.answer()

@router.callback_query(F.data.startswith('pay_'))
async def process_payment(callback_query: CallbackQuery):
    order_id = callback_query.data.split('_')[1]
    builder = InlineKeyboardBuilder()
    builder.button(text='–ù–∞–∑–∞–¥', callback_data='back_to_main_menu')
    await callback_query.message.edit_text(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}",
        reply_markup=builder.as_markup()
    )
    await callback_query.answer()

@router.callback_query(F.data == 'cancel_order')
async def process_cancel_order(callback_query: CallbackQuery):
    await callback_query.message.edit_text(MAIN_MENU_TEXT, reply_markup=create_main_menu_keyboard())
    await callback_query.answer()

@router.callback_query(F.data == 'referral_system')
async def process_referral_system(callback_query: CallbackQuery):
    referral_link = "https://t.me/starfallrobot?start=eyJyZWYiOiAzfQ"
    invited_users = 35
    earned = 221.87
    current_balance = 115.30

    builder = InlineKeyboardBuilder()
    if current_balance >= MIN_PAYOUT:
        builder.button(text='–í—ã–≤–µ—Å—Ç–∏', callback_data='withdraw_balance')
    builder.row()
    builder.button(text='–ù–∞–∑–∞–¥', callback_data='back_to_main_menu')

    text = (
        "üë§ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π –ª—é–¥–µ–π –∏ –ø–æ–ª—É—á–∞–π 20% –æ—Ç –¥–æ—Ö–æ–¥–∞ –Ω–∞–≤—Å–µ–≥–¥–∞\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}\n"
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited_users} —á–µ–ª.\n"
        f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earned:.2f} RUB\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f} RUB\n"
    )
    if current_balance < MIN_PAYOUT:
        remaining_amount = MIN_PAYOUT - current_balance
        text += f"‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â–µ {remaining_amount:.2f} RUB"

    await callback_query.message.edit_text(text, reply_markup=builder.as_markup())
    await callback_query.answer()

@router.callback_query(F.data == 'withdraw_balance')
async def process_withdraw_balance(callback_query: CallbackQuery):
    current_balance = 115.30
    if current_balance < MIN_PAYOUT:
        remaining_amount = MIN_PAYOUT - current_balance
        await callback_query.answer(f"‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â–µ {remaining_amount:.2f} RUB", show_alert=True)
    else:
        await callback_query.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=True)

@router.callback_query(F.data == 'support')
async def process_support(callback_query: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text='–ù–∞–∑–∞–¥', callback_data='back_to_main_menu')
    await callback_query.message.edit_text(
        "üë§ –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ StarFall: @starfall_support_bot\n‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 08:00-22:00 (UTC +3)",
        reply_markup=builder.as_markup()
    )
    await callback_query.answer()

@router.callback_query(F.data == 'buy_for_self')
async def process_callback_buy_for_self(callback_query: CallbackQuery):
    await process_buy_options(callback_query, "—Å–µ–±–µ")

@router.callback_query(F.data == 'gift')
async def process_gift(callback_query: CallbackQuery):
    user_states[callback_query.from_user.id] = "waiting_for_username"
    builder = InlineKeyboardBuilder()
    builder.button(text='–ù–∞–∑–∞–¥', callback_data='back_to_main_menu')
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –∑–≤–µ–∑–¥—ã\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä, @{callback_query.from_user.username}",
        reply_markup=builder.as_markup()
    )
    await callback_query.answer()

@router.callback_query(F.data == 'profile')
async def process_profile(callback_query: CallbackQuery):
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    user_id = callback_query.from_user.id
    total_spent = 92.08  # –ü—Ä–∏–º–µ—Ä —Å—É–º–º—ã –ø–æ–∫—É–ø–æ–∫
    total_purchases = 1  # –ü—Ä–∏–º–µ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫—É–ø–æ–∫
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    builder = InlineKeyboardBuilder()
    builder.button(text='–ù–∞–∑–∞–¥', callback_data='back_to_main_menu')
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await callback_query.message.edit_text(
        f"–ü—Ä–æ—Ñ–∏–ª—å\n\n"
        f"ID: {user_id} \n\n"
        f"üí∏ –°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {total_spent:.2f} RUB\n"
        f"üî¢ –ö–æ–ª-–≤–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}",
        reply_markup=builder.as_markup()
    )
    await callback_query.answer()

@router.message(lambda message: user_states.get(message.from_user.id) == "waiting_for_username")
async def process_username_input(message: Message):
    username = message.text.strip()
    if not username.startswith("@"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å '@'")
        return
    user_states[message.from_user.id] = {"recipient": username}
    await process_buy_options(message, username)

async def process_buy_options(query_or_message, recipient):
    builder = InlineKeyboardBuilder()
    for stars in STAR_PRICES:
        price = stars * STAR_PRICE
        builder.button(text=f'‚ú®{stars} –∑–≤–µ–∑–¥ - {price:.2f} ‚ÇΩ', callback_data=f'buy_{stars}')
    builder.row()
    builder.button(text='–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —á–∞—Ç', callback_data='custom_amount')
    builder.row()
    builder.button(text='–ù–∞–∑–∞–¥', callback_data='back_to_main_menu')
    builder.adjust(1, 1, 1, 1, 1, 1, 1)

    text = (
        f"‚≠êÔ∏è Telegram Stars\n"
        f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ {recipient} –≤—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–Ω–µ –≤ —á–∞—Ç\n"
        f"–ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –æ—Ç 50 –¥–æ 1,000,000 ‚≠êÔ∏è –∑–∞ —Ä–∞–∑\n"
        f"üëâ –ö–æ–º–∏—Å—Å–∏—è —Å–Ω–∏–∂–µ–Ω–∞ –≤ 2 —Ä–∞–∑–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 250 –∑–≤–µ–∑–¥"
    )

    if isinstance(query_or_message, CallbackQuery):
        await query_or_message.message.edit_text(text, reply_markup=builder.as_markup())
        await query_or_message.answer()
    else:
        await query_or_message.answer(text, reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith('buy_'))
async def process_buy_package(callback_query: CallbackQuery):
    stars = int(callback_query.data.split('_')[1])
    price = stars * STAR_PRICE
    order_id = str(uuid.uuid4())
    builder = InlineKeyboardBuilder()
    builder.button(text='üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', callback_data=f'pay_{order_id}')
    builder.row()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_order')

    await callback_query.message.edit_text(
        f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω\n"
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: starfall\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price:.2f}‚ÇΩ\n"
        f"–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: {stars} telegram –∑–≤–µ–∑–¥\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –≤—ã",
        reply_markup=builder.as_markup()
    )
    await callback_query.answer()

if __name__ == '__main__':
    from aiogram import Dispatcher
    dp = Dispatcher()
    dp.include_router(router)
    dp.run_polling(bot)